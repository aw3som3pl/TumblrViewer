// Generated by Dagger (https://google.github.io/dagger).
package com.jnsoftware.tumblr.ui.login;

import com.jnsoftware.tumblr.data.DataManager;
import com.jnsoftware.tumblr.utils.rx.SchedulerProvider;
import dagger.internal.Factory;
import io.reactivex.disposables.CompositeDisposable;
import javax.inject.Provider;

public final class LoginPresenter_Factory<V extends LoginMvpView>
    implements Factory<LoginPresenter<V>> {
  private final Provider<DataManager> managerProvider;

  private final Provider<SchedulerProvider> schedulerProvider;

  private final Provider<CompositeDisposable> compositeDisposableProvider;

  public LoginPresenter_Factory(
      Provider<DataManager> managerProvider,
      Provider<SchedulerProvider> schedulerProvider,
      Provider<CompositeDisposable> compositeDisposableProvider) {
    this.managerProvider = managerProvider;
    this.schedulerProvider = schedulerProvider;
    this.compositeDisposableProvider = compositeDisposableProvider;
  }

  @Override
  public LoginPresenter<V> get() {
    return new LoginPresenter<V>(
        managerProvider.get(), schedulerProvider.get(), compositeDisposableProvider.get());
  }

  public static <V extends LoginMvpView> LoginPresenter_Factory<V> create(
      Provider<DataManager> managerProvider,
      Provider<SchedulerProvider> schedulerProvider,
      Provider<CompositeDisposable> compositeDisposableProvider) {
    return new LoginPresenter_Factory<V>(
        managerProvider, schedulerProvider, compositeDisposableProvider);
  }
}
