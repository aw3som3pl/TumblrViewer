// Generated by Dagger (https://google.github.io/dagger).
package com.jnsoftware.tumblr.di.module;

import com.jnsoftware.tumblr.ui.login.LoginMvpPresenter;
import com.jnsoftware.tumblr.ui.login.LoginMvpView;
import com.jnsoftware.tumblr.ui.login.LoginPresenter;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class ActivityModule_ProvideLoginPresenterFactory
    implements Factory<LoginMvpPresenter<LoginMvpView>> {
  private final ActivityModule module;

  private final Provider<LoginPresenter<LoginMvpView>> presenterProvider;

  public ActivityModule_ProvideLoginPresenterFactory(
      ActivityModule module, Provider<LoginPresenter<LoginMvpView>> presenterProvider) {
    this.module = module;
    this.presenterProvider = presenterProvider;
  }

  @Override
  public LoginMvpPresenter<LoginMvpView> get() {
    return Preconditions.checkNotNull(
        module.provideLoginPresenter(presenterProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static ActivityModule_ProvideLoginPresenterFactory create(
      ActivityModule module, Provider<LoginPresenter<LoginMvpView>> presenterProvider) {
    return new ActivityModule_ProvideLoginPresenterFactory(module, presenterProvider);
  }

  public static LoginMvpPresenter<LoginMvpView> proxyProvideLoginPresenter(
      ActivityModule instance, LoginPresenter<LoginMvpView> presenter) {
    return Preconditions.checkNotNull(
        instance.provideLoginPresenter(presenter),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
