// Generated by Dagger (https://google.github.io/dagger).
package com.jnsoftware.tumblr.di.component;

import com.jnsoftware.tumblr.data.DataManager;
import com.jnsoftware.tumblr.di.module.ActivityModule;
import com.jnsoftware.tumblr.di.module.ActivityModule_ProvideCompositeDisposableFactory;
import com.jnsoftware.tumblr.di.module.ActivityModule_ProvideLoginPresenterFactory;
import com.jnsoftware.tumblr.di.module.ActivityModule_ProvideMainPresenterFactory;
import com.jnsoftware.tumblr.di.module.ActivityModule_ProvideRssAdapterFactory;
import com.jnsoftware.tumblr.di.module.ActivityModule_ProvideSchedulerProviderFactory;
import com.jnsoftware.tumblr.ui.login.LoginActivity;
import com.jnsoftware.tumblr.ui.login.LoginActivity_MembersInjector;
import com.jnsoftware.tumblr.ui.login.LoginMvpPresenter;
import com.jnsoftware.tumblr.ui.login.LoginMvpView;
import com.jnsoftware.tumblr.ui.login.LoginPresenter_Factory;
import com.jnsoftware.tumblr.ui.main.MainActivity;
import com.jnsoftware.tumblr.ui.main.MainActivity_MembersInjector;
import com.jnsoftware.tumblr.ui.main.MainMvpPresenter;
import com.jnsoftware.tumblr.ui.main.MainMvpView;
import com.jnsoftware.tumblr.ui.main.MainPresenter_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerActivityComponent implements ActivityComponent {
  private ActivityModule activityModule;

  private com_jnsoftware_tumblr_di_component_ApplicationComponent_getDataManager
      getDataManagerProvider;

  private ActivityModule_ProvideSchedulerProviderFactory provideSchedulerProvider;

  private ActivityModule_ProvideCompositeDisposableFactory provideCompositeDisposableProvider;

  private LoginPresenter_Factory loginPresenterProvider;

  private Provider<LoginMvpPresenter<LoginMvpView>> provideLoginPresenterProvider;

  private MainPresenter_Factory mainPresenterProvider;

  private Provider<MainMvpPresenter<MainMvpView>> provideMainPresenterProvider;

  private DaggerActivityComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.getDataManagerProvider =
        new com_jnsoftware_tumblr_di_component_ApplicationComponent_getDataManager(
            builder.applicationComponent);
    this.provideSchedulerProvider =
        ActivityModule_ProvideSchedulerProviderFactory.create(builder.activityModule);
    this.provideCompositeDisposableProvider =
        ActivityModule_ProvideCompositeDisposableFactory.create(builder.activityModule);
    this.loginPresenterProvider =
        LoginPresenter_Factory.create(
            getDataManagerProvider, provideSchedulerProvider, provideCompositeDisposableProvider);
    this.provideLoginPresenterProvider =
        DoubleCheck.provider(
            ActivityModule_ProvideLoginPresenterFactory.create(
                builder.activityModule, loginPresenterProvider));
    this.mainPresenterProvider =
        MainPresenter_Factory.create(
            getDataManagerProvider, provideSchedulerProvider, provideCompositeDisposableProvider);
    this.provideMainPresenterProvider =
        DoubleCheck.provider(
            ActivityModule_ProvideMainPresenterFactory.create(
                builder.activityModule, mainPresenterProvider));
    this.activityModule = builder.activityModule;
  }

  @Override
  public void inject(LoginActivity loginActivity) {
    injectLoginActivity(loginActivity);
  }

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);
  }

  private LoginActivity injectLoginActivity(LoginActivity instance) {
    LoginActivity_MembersInjector.injectMPresenter(instance, provideLoginPresenterProvider.get());
    return instance;
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectMPresenter(instance, provideMainPresenterProvider.get());
    MainActivity_MembersInjector.injectMRssAdapter(
        instance, ActivityModule_ProvideRssAdapterFactory.proxyProvideRssAdapter(activityModule));
    return instance;
  }

  public static final class Builder {
    private ActivityModule activityModule;

    private ApplicationComponent applicationComponent;

    private Builder() {}

    public ActivityComponent build() {
      if (activityModule == null) {
        throw new IllegalStateException(ActivityModule.class.getCanonicalName() + " must be set");
      }
      if (applicationComponent == null) {
        throw new IllegalStateException(
            ApplicationComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerActivityComponent(this);
    }

    public Builder activityModule(ActivityModule activityModule) {
      this.activityModule = Preconditions.checkNotNull(activityModule);
      return this;
    }

    public Builder applicationComponent(ApplicationComponent applicationComponent) {
      this.applicationComponent = Preconditions.checkNotNull(applicationComponent);
      return this;
    }
  }

  private static class com_jnsoftware_tumblr_di_component_ApplicationComponent_getDataManager
      implements Provider<DataManager> {
    private final ApplicationComponent applicationComponent;

    com_jnsoftware_tumblr_di_component_ApplicationComponent_getDataManager(
        ApplicationComponent applicationComponent) {
      this.applicationComponent = applicationComponent;
    }

    @Override
    public DataManager get() {
      return Preconditions.checkNotNull(
          applicationComponent.getDataManager(),
          "Cannot return null from a non-@Nullable component method");
    }
  }
}
