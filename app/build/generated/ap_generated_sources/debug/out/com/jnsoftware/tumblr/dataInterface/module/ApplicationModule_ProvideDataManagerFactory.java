// Generated by Dagger (https://google.github.io/dagger).
package com.jnsoftware.tumblr.dataInterface.module;

import com.jnsoftware.tumblr.data.BaseDataManager;
import com.jnsoftware.tumblr.data.DataManager;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class ApplicationModule_ProvideDataManagerFactory implements Factory<DataManager> {
  private final ApplicationModule module;

  private final Provider<BaseDataManager> mDataManagerProvider;

  public ApplicationModule_ProvideDataManagerFactory(
      ApplicationModule module, Provider<BaseDataManager> mDataManagerProvider) {
    this.module = module;
    this.mDataManagerProvider = mDataManagerProvider;
  }

  @Override
  public DataManager get() {
    return Preconditions.checkNotNull(
        module.provideDataManager(mDataManagerProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static ApplicationModule_ProvideDataManagerFactory create(
      ApplicationModule module, Provider<BaseDataManager> mDataManagerProvider) {
    return new ApplicationModule_ProvideDataManagerFactory(module, mDataManagerProvider);
  }

  public static DataManager proxyProvideDataManager(
      ApplicationModule instance, BaseDataManager mDataManager) {
    return Preconditions.checkNotNull(
        instance.provideDataManager(mDataManager),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
