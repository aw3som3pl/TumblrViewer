// Generated by Dagger (https://google.github.io/dagger).
package com.jnsoftware.tumblr.dataInterface.component;

import android.app.Application;
import android.content.Context;
import com.jnsoftware.tumblr.data.BaseDataManager_Factory;
import com.jnsoftware.tumblr.data.DataManager;
import com.jnsoftware.tumblr.data.db.AppDatabase;
import com.jnsoftware.tumblr.data.network.RestApiHelper;
import com.jnsoftware.tumblr.data.network.RestApiManager;
import com.jnsoftware.tumblr.data.network.RestApiManager_Factory;
import com.jnsoftware.tumblr.data.prefs.PreferencesHelper;
import com.jnsoftware.tumblr.data.prefs.PreferencesManager_Factory;
import com.jnsoftware.tumblr.dataInterface.module.ApplicationModule;
import com.jnsoftware.tumblr.dataInterface.module.ApplicationModule_ProvideApiServiceFactory;
import com.jnsoftware.tumblr.dataInterface.module.ApplicationModule_ProvideAppDatabaseFactory;
import com.jnsoftware.tumblr.dataInterface.module.ApplicationModule_ProvideApplicationFactory;
import com.jnsoftware.tumblr.dataInterface.module.ApplicationModule_ProvideContextFactory;
import com.jnsoftware.tumblr.dataInterface.module.ApplicationModule_ProvideDataManagerFactory;
import com.jnsoftware.tumblr.dataInterface.module.ApplicationModule_ProvidePreferenceNameFactory;
import com.jnsoftware.tumblr.dataInterface.module.ApplicationModule_ProvidePreferencesHelperFactory;
import com.jnsoftware.tumblr.dataInterface.module.ApplicationModule_ProvideRestApiHelperFactory;
import com.jnsoftware.tumblr.root.TumblrViewerApp;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerApplicationComponent implements ApplicationComponent {
  private ApplicationModule applicationModule;

  private ApplicationModule_ProvideContextFactory provideContextProvider;

  private Provider<AppDatabase> provideAppDatabaseProvider;

  private ApplicationModule_ProvidePreferenceNameFactory providePreferenceNameProvider;

  private PreferencesManager_Factory preferencesManagerProvider;

  private Provider<PreferencesHelper> providePreferencesHelperProvider;

  private ApplicationModule_ProvideApiServiceFactory provideApiServiceProvider;

  private Provider<RestApiManager> restApiManagerProvider;

  private Provider<RestApiHelper> provideRestApiHelperProvider;

  private BaseDataManager_Factory baseDataManagerProvider;

  private Provider<DataManager> provideDataManagerProvider;

  private DaggerApplicationComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.applicationModule = builder.applicationModule;
    this.provideContextProvider =
        ApplicationModule_ProvideContextFactory.create(builder.applicationModule);
    this.provideAppDatabaseProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvideAppDatabaseFactory.create(builder.applicationModule));
    this.providePreferenceNameProvider =
        ApplicationModule_ProvidePreferenceNameFactory.create(builder.applicationModule);
    this.preferencesManagerProvider =
        PreferencesManager_Factory.create(provideContextProvider, providePreferenceNameProvider);
    this.providePreferencesHelperProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvidePreferencesHelperFactory.create(
                builder.applicationModule, preferencesManagerProvider));
    this.provideApiServiceProvider =
        ApplicationModule_ProvideApiServiceFactory.create(builder.applicationModule);
    this.restApiManagerProvider =
        DoubleCheck.provider(RestApiManager_Factory.create(provideApiServiceProvider));
    this.provideRestApiHelperProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvideRestApiHelperFactory.create(
                builder.applicationModule, restApiManagerProvider));
    this.baseDataManagerProvider =
        BaseDataManager_Factory.create(
            provideContextProvider,
            provideAppDatabaseProvider,
            providePreferencesHelperProvider,
            provideRestApiHelperProvider);
    this.provideDataManagerProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvideDataManagerFactory.create(
                builder.applicationModule, baseDataManagerProvider));
  }

  @Override
  public void inject(TumblrViewerApp app) {}

  @Override
  public Context context() {
    return ApplicationModule_ProvideContextFactory.proxyProvideContext(applicationModule);
  }

  @Override
  public Application application() {
    return ApplicationModule_ProvideApplicationFactory.proxyProvideApplication(applicationModule);
  }

  @Override
  public DataManager getDataManager() {
    return provideDataManagerProvider.get();
  }

  public static final class Builder {
    private ApplicationModule applicationModule;

    private Builder() {}

    public ApplicationComponent build() {
      if (applicationModule == null) {
        throw new IllegalStateException(
            ApplicationModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerApplicationComponent(this);
    }

    public Builder applicationModule(ApplicationModule applicationModule) {
      this.applicationModule = Preconditions.checkNotNull(applicationModule);
      return this;
    }
  }
}
