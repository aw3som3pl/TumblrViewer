// Generated by Dagger (https://google.github.io/dagger).
package com.jnsoftware.tumblr.di.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import io.reactivex.disposables.CompositeDisposable;

public final class ActivityModule_ProvideCompositeDisposableFactory
    implements Factory<CompositeDisposable> {
  private final ActivityModule module;

  public ActivityModule_ProvideCompositeDisposableFactory(ActivityModule module) {
    this.module = module;
  }

  @Override
  public CompositeDisposable get() {
    return Preconditions.checkNotNull(
        module.provideCompositeDisposable(),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static ActivityModule_ProvideCompositeDisposableFactory create(ActivityModule module) {
    return new ActivityModule_ProvideCompositeDisposableFactory(module);
  }

  public static CompositeDisposable proxyProvideCompositeDisposable(ActivityModule instance) {
    return Preconditions.checkNotNull(
        instance.provideCompositeDisposable(),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
